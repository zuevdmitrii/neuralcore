!function(n){var e={};function t(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=n,t.c=e,t.d=function(n,e,r){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:r})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)t.d(r,o,function(e){return n[e]}.bind(null,o));return r},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=0)}([function(n,e,t){"use strict";t.r(e);var r=function(n){return 1/(1+Math.exp(-n))};var o=function(n){var e=this;this.out=NaN,this.in=NaN,this.derivative=0,this.calculate=function(){e.out=e.activationFn(e.in)},this.activationFn=n.activationFn},a=function(n){this.neurons=[];for(var e=0;e<n.countOfNeurons;e++)this.neurons.push(new o({activationFn:n.isInput?function(n){return n}:r}))},i=function(){var n=this;this.weights={},this.add=function(e,t,r,o){n.weights[e]||(n.weights[e]={}),n.weights[e][t]||(n.weights[e][t]={}),n.weights[e][t][r+"-"+o]={w:Math.random(),wPrev:0,deltaW:0,deltaWPrev:0}},this.get=function(e,t,r,o){return n.weights[e][t][r+"-"+o]}},u=new function(){var n=this;this.layers=[],this.weights=new i,this.Speed=.7,this.Alpha=.01,this.ErrorRate=.01,this.addLayer=function(e){var t=n.layers[n.layers.length-1],r=n.layers.length-1,o=new a({countOfNeurons:e,isInput:!t});n.layers.push(o);var i=n.layers.length-1;if(t)for(var u=t.neurons.length,s=0;s<u;s++)for(var l=0;l<e;l++)n.weights.add(r,i,s,l)},this.calculate=function(e){e.forEach((function(e,t){n.layers[0].neurons[t].in=e,n.layers[0].neurons[t].calculate()}));for(var t=function(e){var t=n.layers[e],r=n.layers[e-1];t.neurons.forEach((function(t,o){var a=r.neurons.reduce((function(t,r,a){return t+n.weights.get(e-1,e,a,o).w*r.out}),0);t.in=a,t.calculate()}))},r=1;r<n.layers.length;r++)t(r);return n.layers[n.layers.length-1].neurons.map((function(n){return n.out}))},this.train=function(e,t){e.forEach((function(e,t){n.layers[0].neurons[t].in=e,n.layers[0].neurons[t].calculate()}));for(var r=function(e){var t=n.layers[e],r=n.layers[e-1];t.neurons.forEach((function(t,o){var a=r.neurons.reduce((function(t,r,a){return t+n.weights.get(e-1,e,a,o).w*r.out}),0);t.in=a,t.calculate()}))},o=1;o<n.layers.length;o++)r(o);var a=n.layers[n.layers.length-1];n.Error=a.neurons.reduce((function(n,e,r){return e.derivative=e.out*(1-e.out)*(t[r]-e.out),n+Math.pow(t[r]-e.out,2)}),0)/a.neurons.length;var i=function(e){var t=n.layers[e],r=n.layers[e+1];t.neurons.forEach((function(t,o){t.derivative=t.out*(1-t.out)*r.neurons.reduce((function(r,a,i){var u=n.weights.get(e,e+1,o,i),s=u.w;return u.deltaW=n.Alpha*u.deltaW+(1-n.Alpha)*n.Speed*(a.derivative*t.out),u.w=u.w+u.deltaW,r+a.derivative*s}),0)}))};for(o=n.layers.length-2;o>=0;o--)i(o)},this.Error=0};u.addLayer(3),u.addLayer(4),u.addLayer(4),u.addLayer(4);var s=[[0,0,0],[0,1,0],[1,0,0],[1,1,0],[0,0,1],[0,1,1],[1,0,1],[1,1,1]],l=[[0,0,0,0],[0,1,0,0],[0,1,0,0],[0,0,1,0],[0,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]],c=function(){var n=0;s.forEach((function(e,t){u.train(e,l[t]),n+=u.Error})),console.log(n/s.length)},f=function(){console.log("--------------------------------------------"),s.forEach((function(n,e){var t=u.calculate(n);console.log("Data: ",n,"Answer: ",t)})),console.log("--------------------------------------------"),console.log("")};window.startTrain=function(){f();for(var n=0;n<1e3;n++)c();f()},window.NetworkInst=u,console.log(u)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,